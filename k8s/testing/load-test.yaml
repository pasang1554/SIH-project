# k8s/testing/load-test.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: load-test
  namespace: testing
spec:
  template:
    spec:
      containers:
      - name: k6
        image: loadimpact/k6:latest
        command: ["k6", "run", "/scripts/load-test.js"]
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap:
          name: k6-scripts
      restartPolicy: Never

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-scripts
  namespace: testing
data:
  load-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { Rate } from 'k6/metrics';
    
    export let errorRate = new Rate('errors');
    
    export let options = {
      stages: [
        { duration: '2m', target: 100 },   // Ramp up to 100 users
        { duration: '5m', target: 100 },   // Stay at 100 users
        { duration: '2m', target: 200 },   // Ramp up to 200 users
        { duration: '5m', target: 200 },   // Stay at 200 users
        { duration: '2m', target: 0 },     // Ramp down to 0 users
      ],
      thresholds: {
        http_req_duration: ['p(95)<500'], // 95% of requests must complete below 500ms
        errors: ['rate<0.1'],             // Error rate must be below 10%
      },
    };
    
    const BASE_URL = 'https://api.agriplatform.com';
    
    export default function () {
      // Test API endpoints
      let responses = http.batch([
        ['GET', `${BASE_URL}/api/weather/current`],
        ['GET', `${BASE_URL}/api/recommendations`],
        ['GET', `${BASE_URL}/api/market/prices`],
      ]);
      
      responses.forEach(response => {
        check(response, {
          'status is 200': (r) => r.status === 200,
          'response time < 500ms': (r) => r.timings.duration < 500,
        }) || errorRate.add(1);
      });
      
      sleep(1);
    }